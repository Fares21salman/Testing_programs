//1. Patern Generator:
Write a program to print the given pattern below using 3 functions (1st to accept n and to print from 1 to n, 2nd to accept n and print spaces in between, 3rd to accept the n and print from n to 1)
1234554321
1234    4321
123        321
12            21
1                1

Concepts to be used.
- Loops

#include <stdio.h>

// Function to print numbers from 1 to n
void printIncreasing(int n) {
    for (int i = 1; i <= n; i++) {
        printf("%d", i);
    }
}

// Function to print spaces
void printSpaces(int n) {
    for (int i = 1; i <= n; i++) {
        printf(" ");
    }
}

// Function to print numbers from n to 1
void printDecreasing(int n) {
    for (int i = n; i >= 1; i--) {
        printf("%d", i);
    }
}

int main() {
    int n;
    printf("Enter the value of n: ");
    scanf("%d", &n);

    for (int i = n; i >= 1; i--) {
        printIncreasing(i);
        printSpaces(2 * (n - i));
        if (i != 1) {
            printDecreasing(i);
        }
        printf("\n");
    }

    return 0;
}

//2. Prints Bits:
Scan a 32bit integer and prints its bits.

Concepts to be used.
- Loops
- Bitwise Operators

#include <stdio.h>

void printBits(unsigned int num) {
    unsigned int mask = 1 << 31; // Start with the leftmost bit

    for (int i = 0; i < 32; i++) {
        if (num & mask) {
            printf("1");
        } else {
            printf("0");
        }

        mask >>= 1; // Shift the mask to the right
    }

    printf("\n");
}

int main() {
    unsigned int num;
    printf("Enter a 32-bit integer: ");
    scanf("%u", &num);

    printf("Bits: ");
    printBits(num);

    return 0;
}

//3. Find the largest number by deleting single digit in a 4 digit number 5872 - 872, 9856 - 986

Concepts to be used.
- Loops
- Operators

#include <stdio.h>

int findLargestNumber(int num) {
    int largest = 0;
    int temp = num;
    int divisor = 1;

    while (divisor <= num) {
        int remainder = temp % divisor;
        int reducedNum = (temp / (divisor * 10)) * divisor + remainder;

        if (reducedNum > largest) {
            largest = reducedNum;
        }

        divisor *= 10;
    }

    return largest;
}

int main() {
    int num;
    printf("Enter a 4-digit number: ");
    scanf("%d", &num);

    int largestNumber = findLargestNumber(num);
    printf("Largest Number: %d\n", largestNumber);

    return 0;
}

//4. Write a program to find both smallest and largest digits in given n numbers
For example let's say we have n = 3, and n1 = 8, n2 = 156, n3 = 123450, the result will be "Not Valid", 1 and 6, 0 and 5

#include <stdio.h>

void findSmallestAndLargestDigits(int n, int nums[]) {
    int smallestDigit = 9;
    int largestDigit = 0;
    int i;

    for (i = 0; i < n; i++) {
        int num = nums[i];
        while (num > 0) {
            int digit = num % 10;
            if (digit < smallestDigit) {
                smallestDigit = digit;
            }
            if (digit > largestDigit) {
                largestDigit = digit;
            }
            num /= 10;
        }
    }

    printf("Smallest Digit: %d\n", smallestDigit);
    printf("Largest Digit: %d\n", largestDigit);
}

int main() {
    int n;
    printf("Enter the number of values: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Not Valid\n");
        return 0;
    }

    int nums[n];
    int i;
    for (i = 0; i < n; i++) {
        printf("Enter number %d: ", i + 1);
        scanf("%d", &nums[i]);
    }

    findSmallestAndLargestDigits(n, nums);

    return 0;
}
