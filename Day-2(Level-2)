1. Write a program to swap every alternate element of a given array starting for element 0
For example, let's say we have a[5] = {10, 20, 30, 40, 50}, the result should be a[5] = {30, 20, 10, 40, 50}
one more example a[5] = {10, 20, 30, 40, 50, 60}, the result should be a[5] = {30, 20, 10, 60, 50, 40}

Topics to be covered
- Arrays
- Loops
- Basic Operators

#include <stdio.h>

void swapAlternateElements(int *arr, int size) {
    int i, temp;
    for (i = 0; i < size - 1; i += 2) {
        temp = arr[i];
        arr[i] = arr[i + 2];
        arr[i + 2] = temp;
    }
}

int main() {
    int i;
    int size;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];

    printf("Enter the elements of the array:\n");
    for (i = 0; i < size; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }

    printf("Original array: ");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    swapAlternateElements(arr, size);

    printf("\nSwapped array: ");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    printf("\n");

    return 0;
}

//3. Suppose 7 names are stored in an array of pointers names[] as shown below:
 char *name[]={
        "Santosh", "Amol", "Santosh Jain", "Kishore", "Rahul", "Amolkumar", "Hemant"
          }
  Write a program to arrange these names in alphabetical order.
  
#include <stdio.h>
#include <string.h>

void sortNames(char *names[], int numNames) {
    int i, j;
    char *temp;

    for (i = 0; i < numNames - 1; i++) {
        for (j = 0; j < numNames - i - 1; j++) {
            if (strcmp(names[j], names[j + 1]) > 0) {
                temp = names[j];
                names[j] = names[j + 1];
                names[j + 1] = temp;
            }
        }
    }
}

int main() {
    int numNames, i;

    printf("Enter the number of names: ");
    scanf("%d", &numNames);

    char *names[numNames];

    printf("Enter the names:\n");
    for (i = 0; i < numNames; i++) {
        char buffer[100];
        scanf("%s", buffer);
        names[i] = strdup(buffer);
    }

    printf("\nNames before sorting:\n");
    for (i = 0; i < numNames; i++) {
        printf("%s\n", names[i]);
    }

    sortNames(names, numNames);

    printf("\nNames after sorting:\n");
    for (i = 0; i < numNames; i++) {
        printf("%s\n", names[i]);
    }

    // Free memory allocated for names
    for (i = 0; i < numNames; i++) {
        free(names[i]);
    }

    return 0;
}

//4. Write a function xstrchr() which scans a string from beginning to end in search of a character. 
If the character is found, it should return a pointer to the first occurrence of the given character in the string.
If the given character is not found, the function returns a NULL.
The prototype of the function should be:

char *xstrchr(char *string, char ch):

#include <stdio.h>

char *xstrchr(char *string, char ch) {
    while (*string != '\0') {
        if (*string == ch) {
            return string;
        }
        string++;
    }
    return NULL;
}

int main() {
    char string[100];
    char ch;
    char *result;

    printf("Enter a string: ");
    scanf("%s", string);

    printf("Enter a character to search: ");
    scanf(" %c", &ch);

    result = xstrchr(string, ch);

    if (result == NULL) {
        printf("Character '%c' not found in the string.\n", ch);
    } else {
        printf("Character '%c' found at position: %ld\n", ch, result - string + 1);
    }

    return 0;
}

//5. Write a program to encode any given string such that it gets converted into an unrecognizable form. 
Also write a decode function to get back the original string.

#include <stdio.h>

// Function to encode the given string
void encode(char *str) {
    while (*str != '\0') {
        *str = *str + 1;  // Shift each character by 1 position
        str++;
    }
}

// Function to decode the encoded string
void decode(char *str) {
    while (*str != '\0') {
        *str = *str - 1;  // Shift each character back by 1 position
        str++;
    }
}

int main() {
    char str[100];

    printf("Enter a string: ");
    fgets(str, sizeof(str), stdin);

    // Encode the string
    encode(str);
    printf("Encoded string: %s", str);

    // Decode the encoded string
    decode(str);
    printf("Decoded string: %s", str);

    return 0;
}
