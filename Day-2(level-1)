1. Write a program to print exponent part of double variable in hexadecimal and binary format.
lets say we have x = 0.7, the exponent in hex is 0x3FE and 0b01111111110
You may use the below link to validate you output
https://baseconvert.com/ieee-754-floating-point

Topics to be covered
- Pointers
- Bitwise Operators

#include <stdio.h>

void printExponent(double num) {
    unsigned long long* ptr = (unsigned long long*)&num; // Use a pointer to access the bits of the double value

    // Extract the exponent bits from the double value
    unsigned long long exponentBits = (*ptr >> 52) & 0x7FF;

    // Print the exponent in hexadecimal format
    printf("Exponent (Hex): 0x%llX\n", exponentBits);

    // Print the exponent in binary format
    printf("Exponent (Binary): ");
    for (int i = 10; i >= 0; i--) {
        int bit = (exponentBits >> i) & 1;
        printf("%d", bit);
    }
    printf("\n");
}

int main() {
    double x;
    printf("Enter a double value: ");
    scanf("%lf", &x);

    printExponent(x);

    return 0;
}

//2. Write a program to swap any type of data passed to an function.

Topics to be covered
- Pointers
- Type Casting

#include <stdio.h>

void swap(void* a, void* b, size_t size) {
    char* temp = (char*)malloc(size);  // Allocate temporary memory for swapping

    // Copy the content of 'a' to the temporary variable
    memcpy(temp, a, size);

    // Copy the content of 'b' to 'a'
    memcpy(a, b, size);

    // Copy the content of the temporary variable to 'b'
    memcpy(b, temp, size);

    free(temp);  // Free the temporary memory
}

int main() {
    int num1, num2;
    printf("Enter the first integer: ");
    scanf("%d", &num1);
    printf("Enter the second integer: ");
    scanf("%d", &num2);
    printf("Before swapping: num1 = %d, num2 = %d\n", num1, num2);

    // Swap the integers
    swap(&num1, &num2, sizeof(int));
    printf("After swapping: num1 = %d, num2 = %d\n", num1, num2);

    double d1, d2;
    printf("Enter the first double: ");
    scanf("%lf", &d1);
    printf("Enter the second double: ");
    scanf("%lf", &d2);
    printf("Before swapping: d1 = %lf, d2 = %lf\n", d1, d2);

    // Swap the doubles
    swap(&d1, &d2, sizeof(double));
    printf("After swapping: d1 = %lf, d2 = %lf\n", d1, d2);

    char c1, c2;
    printf("Enter the first character: ");
    scanf(" %c", &c1);
    printf("Enter the second character: ");
    scanf(" %c", &c2);
    printf("Before swapping: c1 = %c, c2 = %c\n", c1, c2);

    // Swap the characters
    swap(&c1, &c2, sizeof(char));
    printf("After swapping: c1 = %c, c2 = %c\n", c1, c2);

    return 0;
}

//3. Write a program to sum every alternate elements of a given array starting for element 0
For example, let's say we have a[5] = {10, 20, 30, 40, 50}, the result should be 10 + 30 + 50 = 90

Topics to be covered
- Arrays
- Loops
- Basic Operators

#include <stdio.h>

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    int sum = 0;
    for (int i = 0; i < size; i += 2) {
        sum += arr[i];
    }

    printf("Sum of alternate elements starting from 0: %d\n", sum);

    return 0;
}

//4. Write a program to find total number of bits set in a given array.
Say we have a array of 3 elements
a[3] = {0x1, 0xF4, 0x10001};
The total number of set bits in the given array is
1 bit in 0x01, 5 in 0xF4, 2 in 0x10001, so the total is 1 + 5 + 2 = 8 bits

Topics to be covered
- Arrays
- Loops
- Bitwise Operators

#include <stdio.h>

// Function to count the number of set bits in a given number
int countSetBits(int num) {
    int count = 0;
    while (num) {
        count += num & 1; // Check the least significant bit
        num >>= 1; // Right shift the number
    }
    return count;
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%x", &arr[i]);
    }

    int totalSetBits = 0;
    for (int i = 0; i < size; i++) {
        totalSetBits += countSetBits(arr[i]);
    }

    printf("Total number of set bits in the array: %d\n", totalSetBits);

    return 0;
}

